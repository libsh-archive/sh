// WARNING - DO NOT EDIT THIS FILE:
// This file was automatically generated from scripts/ShPosition.hpp.py.
// If you wish to change it, edit that file instead.
//
// ---
//
// Sh: A GPU metaprogramming language.
//
// Copyright (c) 2003 University of Waterloo Computer Graphics Laboratory
// Project administrator: Michael D. McCool
// Authors: Zheng Qin, Stefanus Du Toit, Kevin Moule, Tiberiu S. Popa,
//          Michael D. McCool
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must
// not claim that you wrote the original software. If you use this
// software in a product, an acknowledgment in the product documentation
// would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such, and must
// not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source
// distribution.
//////////////////////////////////////////////////////////////////////////////

#ifndef SH_SHPOSITION_HPP
#define SH_SHPOSITION_HPP

#include "ShPoint.hpp"
namespace SH {

/** A vertex or fragment position.
 * 
 * This is semantically a point, but is bound preferentially to the position
 * input and output of the rasterizer or to the vertex position when
 * used in vertex and fragment shaders.
 * 
 *
 */
template<int N, ShBindingType Binding, typename T=float, bool Swizzled=false>
class ShPosition : public ShPoint<N, Binding, T, Swizzled> {
public:
  ShPosition();
  ShPosition(const ShGeneric<N, T>& other);
  ShPosition(const ShPosition<N, Binding, T, Swizzled>& other);
  ShPosition(const ShVariableNodePtr& node, const ShSwizzle& swizzle, bool neg);
  explicit ShPosition(T data[N]);
  
  ~ShPosition();

  ShPosition& operator=(const ShGeneric<N, T>& other);
  ShPosition& operator=(const ShPosition<N, Binding, T, Swizzled>& other);

  ShPosition& operator+=(const ShGeneric<N, T>& right);
  ShPosition& operator-=(const ShGeneric<N, T>& right);
  ShPosition& operator*=(const ShGeneric<N, T>& right);
  ShPosition& operator/=(const ShGeneric<N, T>& right);
  ShPosition& operator%=(const ShGeneric<N, T>& right);
  ShPosition& operator*=(T);
  ShPosition& operator/=(T);
  ShPosition& operator%=(T);
  ShPosition& operator+=(T);
  ShPosition& operator-=(T);
  ShPosition& operator+=(const ShGeneric<1, T>&);
  ShPosition& operator-=(const ShGeneric<1, T>&);
  ShPosition& operator*=(const ShGeneric<1, T>&);
  ShPosition& operator/=(const ShGeneric<1, T>&);
  ShPosition& operator%=(const ShGeneric<1, T>&);
  ShPosition<1, Binding, T, true> operator()(int) const;
  ShPosition<2, Binding, T, true> operator()(int, int) const;
  ShPosition<3, Binding, T, true> operator()(int, int, int) const;
  ShPosition<4, Binding, T, true> operator()(int, int, int, int) const;
  ShPosition<1, Binding, T, true> operator[](int) const;
  
  template<int N2>
  ShPosition<N2, Binding, T, true> swiz(int indices[]) const;
  
  ShPosition operator-() const;
  typedef T ValueType;
  static const int typesize = N;
  static const ShBindingType binding_type = Binding;
  static const ShSemanticType semantic_type = SH_POSITION;

  typedef ShPosition<N, SH_INPUT, T> InputType;
  typedef ShPosition<N, SH_OUTPUT, T> OutputType;
  typedef ShPosition<N, SH_INOUT, T> InOutType;
  typedef ShPosition<N, SH_TEMP, T> TempType;
  typedef ShPosition<N, SH_CONST, T> ConstType;
private:
  typedef ShPoint<N, Binding, T, Swizzled> ParentType;
};

template<ShBindingType Binding, typename T, bool Swizzled>
class ShPosition<1, Binding, T, Swizzled> : public ShPoint<1, Binding, T, Swizzled> {
public:
  ShPosition();
  ShPosition(const ShGeneric<1, T>& other);
  ShPosition(const ShPosition<1, Binding, T, Swizzled>& other);
  ShPosition(const ShVariableNodePtr& node, const ShSwizzle& swizzle, bool neg);
  explicit ShPosition(T data[1]);
  
  ShPosition(T);
  
  ~ShPosition();

  ShPosition& operator=(const ShGeneric<1, T>& other);
  ShPosition& operator=(const ShPosition<1, Binding, T, Swizzled>& other);

  ShPosition& operator=(T other);

  ShPosition& operator+=(const ShGeneric<1, T>& right);
  ShPosition& operator-=(const ShGeneric<1, T>& right);
  ShPosition& operator*=(const ShGeneric<1, T>& right);
  ShPosition& operator/=(const ShGeneric<1, T>& right);
  ShPosition& operator%=(const ShGeneric<1, T>& right);
  ShPosition& operator*=(T);
  ShPosition& operator/=(T);
  ShPosition& operator%=(T);
  ShPosition& operator+=(T);
  ShPosition& operator-=(T);
  ShPosition<1, Binding, T, true> operator()(int) const;
  ShPosition<2, Binding, T, true> operator()(int, int) const;
  ShPosition<3, Binding, T, true> operator()(int, int, int) const;
  ShPosition<4, Binding, T, true> operator()(int, int, int, int) const;
  ShPosition<1, Binding, T, true> operator[](int) const;
  
  template<int N2>
  ShPosition<N2, Binding, T, true> swiz(int indices[]) const;
  
  ShPosition operator-() const;
  typedef T ValueType;
  static const int typesize = 1;
  static const ShBindingType binding_type = Binding;
  static const ShSemanticType semantic_type = SH_POSITION;

  typedef ShPosition<1, SH_INPUT, T> InputType;
  typedef ShPosition<1, SH_OUTPUT, T> OutputType;
  typedef ShPosition<1, SH_INOUT, T> InOutType;
  typedef ShPosition<1, SH_TEMP, T> TempType;
  typedef ShPosition<1, SH_CONST, T> ConstType;
private:
  typedef ShPoint<1, Binding, T, Swizzled> ParentType;
};

template<ShBindingType Binding, typename T, bool Swizzled>
class ShPosition<2, Binding, T, Swizzled> : public ShPoint<2, Binding, T, Swizzled> {
public:
  ShPosition();
  ShPosition(const ShGeneric<2, T>& other);
  ShPosition(const ShPosition<2, Binding, T, Swizzled>& other);
  ShPosition(const ShVariableNodePtr& node, const ShSwizzle& swizzle, bool neg);
  explicit ShPosition(T data[2]);
  
  ShPosition(T, T);
  ShPosition(const ShGeneric<1, T>&, const ShGeneric<1, T>&);
  
  ~ShPosition();

  ShPosition& operator=(const ShGeneric<2, T>& other);
  ShPosition& operator=(const ShPosition<2, Binding, T, Swizzled>& other);

  ShPosition& operator+=(const ShGeneric<2, T>& right);
  ShPosition& operator-=(const ShGeneric<2, T>& right);
  ShPosition& operator*=(const ShGeneric<2, T>& right);
  ShPosition& operator/=(const ShGeneric<2, T>& right);
  ShPosition& operator%=(const ShGeneric<2, T>& right);
  ShPosition& operator*=(T);
  ShPosition& operator/=(T);
  ShPosition& operator%=(T);
  ShPosition& operator+=(T);
  ShPosition& operator-=(T);
  ShPosition& operator+=(const ShGeneric<1, T>&);
  ShPosition& operator-=(const ShGeneric<1, T>&);
  ShPosition& operator*=(const ShGeneric<1, T>&);
  ShPosition& operator/=(const ShGeneric<1, T>&);
  ShPosition& operator%=(const ShGeneric<1, T>&);
  ShPosition<1, Binding, T, true> operator()(int) const;
  ShPosition<2, Binding, T, true> operator()(int, int) const;
  ShPosition<3, Binding, T, true> operator()(int, int, int) const;
  ShPosition<4, Binding, T, true> operator()(int, int, int, int) const;
  ShPosition<1, Binding, T, true> operator[](int) const;
  
  template<int N2>
  ShPosition<N2, Binding, T, true> swiz(int indices[]) const;
  
  ShPosition operator-() const;
  typedef T ValueType;
  static const int typesize = 2;
  static const ShBindingType binding_type = Binding;
  static const ShSemanticType semantic_type = SH_POSITION;

  typedef ShPosition<2, SH_INPUT, T> InputType;
  typedef ShPosition<2, SH_OUTPUT, T> OutputType;
  typedef ShPosition<2, SH_INOUT, T> InOutType;
  typedef ShPosition<2, SH_TEMP, T> TempType;
  typedef ShPosition<2, SH_CONST, T> ConstType;
private:
  typedef ShPoint<2, Binding, T, Swizzled> ParentType;
};

template<ShBindingType Binding, typename T, bool Swizzled>
class ShPosition<3, Binding, T, Swizzled> : public ShPoint<3, Binding, T, Swizzled> {
public:
  ShPosition();
  ShPosition(const ShGeneric<3, T>& other);
  ShPosition(const ShPosition<3, Binding, T, Swizzled>& other);
  ShPosition(const ShVariableNodePtr& node, const ShSwizzle& swizzle, bool neg);
  explicit ShPosition(T data[3]);
  
  ShPosition(T, T, T);
  ShPosition(const ShGeneric<1, T>&, const ShGeneric<1, T>&, const ShGeneric<1, T>&);
  
  ~ShPosition();

  ShPosition& operator=(const ShGeneric<3, T>& other);
  ShPosition& operator=(const ShPosition<3, Binding, T, Swizzled>& other);

  ShPosition& operator+=(const ShGeneric<3, T>& right);
  ShPosition& operator-=(const ShGeneric<3, T>& right);
  ShPosition& operator*=(const ShGeneric<3, T>& right);
  ShPosition& operator/=(const ShGeneric<3, T>& right);
  ShPosition& operator%=(const ShGeneric<3, T>& right);
  ShPosition& operator*=(T);
  ShPosition& operator/=(T);
  ShPosition& operator%=(T);
  ShPosition& operator+=(T);
  ShPosition& operator-=(T);
  ShPosition& operator+=(const ShGeneric<1, T>&);
  ShPosition& operator-=(const ShGeneric<1, T>&);
  ShPosition& operator*=(const ShGeneric<1, T>&);
  ShPosition& operator/=(const ShGeneric<1, T>&);
  ShPosition& operator%=(const ShGeneric<1, T>&);
  ShPosition<1, Binding, T, true> operator()(int) const;
  ShPosition<2, Binding, T, true> operator()(int, int) const;
  ShPosition<3, Binding, T, true> operator()(int, int, int) const;
  ShPosition<4, Binding, T, true> operator()(int, int, int, int) const;
  ShPosition<1, Binding, T, true> operator[](int) const;
  
  template<int N2>
  ShPosition<N2, Binding, T, true> swiz(int indices[]) const;
  
  ShPosition operator-() const;
  typedef T ValueType;
  static const int typesize = 3;
  static const ShBindingType binding_type = Binding;
  static const ShSemanticType semantic_type = SH_POSITION;

  typedef ShPosition<3, SH_INPUT, T> InputType;
  typedef ShPosition<3, SH_OUTPUT, T> OutputType;
  typedef ShPosition<3, SH_INOUT, T> InOutType;
  typedef ShPosition<3, SH_TEMP, T> TempType;
  typedef ShPosition<3, SH_CONST, T> ConstType;
private:
  typedef ShPoint<3, Binding, T, Swizzled> ParentType;
};

template<ShBindingType Binding, typename T, bool Swizzled>
class ShPosition<4, Binding, T, Swizzled> : public ShPoint<4, Binding, T, Swizzled> {
public:
  ShPosition();
  ShPosition(const ShGeneric<4, T>& other);
  ShPosition(const ShPosition<4, Binding, T, Swizzled>& other);
  ShPosition(const ShVariableNodePtr& node, const ShSwizzle& swizzle, bool neg);
  explicit ShPosition(T data[4]);
  
  ShPosition(T, T, T, T);
  ShPosition(const ShGeneric<1, T>&, const ShGeneric<1, T>&, const ShGeneric<1, T>&, const ShGeneric<1, T>&);
  
  ~ShPosition();

  ShPosition& operator=(const ShGeneric<4, T>& other);
  ShPosition& operator=(const ShPosition<4, Binding, T, Swizzled>& other);

  ShPosition& operator+=(const ShGeneric<4, T>& right);
  ShPosition& operator-=(const ShGeneric<4, T>& right);
  ShPosition& operator*=(const ShGeneric<4, T>& right);
  ShPosition& operator/=(const ShGeneric<4, T>& right);
  ShPosition& operator%=(const ShGeneric<4, T>& right);
  ShPosition& operator*=(T);
  ShPosition& operator/=(T);
  ShPosition& operator%=(T);
  ShPosition& operator+=(T);
  ShPosition& operator-=(T);
  ShPosition& operator+=(const ShGeneric<1, T>&);
  ShPosition& operator-=(const ShGeneric<1, T>&);
  ShPosition& operator*=(const ShGeneric<1, T>&);
  ShPosition& operator/=(const ShGeneric<1, T>&);
  ShPosition& operator%=(const ShGeneric<1, T>&);
  ShPosition<1, Binding, T, true> operator()(int) const;
  ShPosition<2, Binding, T, true> operator()(int, int) const;
  ShPosition<3, Binding, T, true> operator()(int, int, int) const;
  ShPosition<4, Binding, T, true> operator()(int, int, int, int) const;
  ShPosition<1, Binding, T, true> operator[](int) const;
  
  template<int N2>
  ShPosition<N2, Binding, T, true> swiz(int indices[]) const;
  
  ShPosition operator-() const;
  typedef T ValueType;
  static const int typesize = 4;
  static const ShBindingType binding_type = Binding;
  static const ShSemanticType semantic_type = SH_POSITION;

  typedef ShPosition<4, SH_INPUT, T> InputType;
  typedef ShPosition<4, SH_OUTPUT, T> OutputType;
  typedef ShPosition<4, SH_INOUT, T> InOutType;
  typedef ShPosition<4, SH_TEMP, T> TempType;
  typedef ShPosition<4, SH_CONST, T> ConstType;
private:
  typedef ShPoint<4, Binding, T, Swizzled> ParentType;
};

typedef ShPosition<1, SH_INPUT, float> ShInputPosition1f;
typedef ShPosition<1, SH_OUTPUT, float> ShOutputPosition1f;
typedef ShPosition<1, SH_INOUT, float> ShInOutPosition1f;
typedef ShPosition<1, SH_TEMP, float> ShPosition1f;
typedef ShPosition<1, SH_CONST, float> ShConstPosition1f;
typedef ShPosition<2, SH_INPUT, float> ShInputPosition2f;
typedef ShPosition<2, SH_OUTPUT, float> ShOutputPosition2f;
typedef ShPosition<2, SH_INOUT, float> ShInOutPosition2f;
typedef ShPosition<2, SH_TEMP, float> ShPosition2f;
typedef ShPosition<2, SH_CONST, float> ShConstPosition2f;
typedef ShPosition<3, SH_INPUT, float> ShInputPosition3f;
typedef ShPosition<3, SH_OUTPUT, float> ShOutputPosition3f;
typedef ShPosition<3, SH_INOUT, float> ShInOutPosition3f;
typedef ShPosition<3, SH_TEMP, float> ShPosition3f;
typedef ShPosition<3, SH_CONST, float> ShConstPosition3f;
typedef ShPosition<4, SH_INPUT, float> ShInputPosition4f;
typedef ShPosition<4, SH_OUTPUT, float> ShOutputPosition4f;
typedef ShPosition<4, SH_INOUT, float> ShInOutPosition4f;
typedef ShPosition<4, SH_TEMP, float> ShPosition4f;
typedef ShPosition<4, SH_CONST, float> ShConstPosition4f;

} // namespace SH
#include "ShPositionImpl.hpp"

#endif // SH_SHPOSITION_HPP
