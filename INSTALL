================================
BUILDING ON WINDOWS OR MAC OS X
================================

The simplest way to build Sh on Winodws  is to use the Visual Studio .NET
solution file:
  win32/Sh.sln

More information can be found on the wiki at:
  http://libsh.org/wiki/index.php/Building_Sh_on_Windows

The Mac OS X version of Sh has been tested on Panther and Xcode 1.5.

To compile Sh on OS X, you will need the following fink packages:
  libpng3

To build Sh, simply open the Xcode project in the "xcode/" directory
and build it. You can also do:
  cd xcode
  xcodebuild -alltargets install

==============================
BUILDING ON LINUX/UNIX
==============================

Requirements:
 - g++ > 3.0.0, >= 4.0 is recommended.
 - libpng
 - for the ARB backend, a recent glext.h as well as GL drivers and headers
   You can obtain the latest glext.h from the SGI OpenGL Registry at
   http://oss.sgi.com/projects/ogl-sample/registry/
 - for the ARB or GLSL backends, you need a GPU that supports shaders: at 
   least a GeForce 5200FX or a Radeon 9600

On Debian GNU/Linux:
  apt-get install automake1.9, autoconf, g++, python, libltdl3-dev, libwxgtk2.6-dev

------------------------------
COMPILATION AND INSTALLATION
------------------------------
Quick installation:
  ./configure
  make
  make install

./configure --help will present you with possible options to configure.

For a local installation, the following is useful:

  ./configure --prefix=$HOME/install/sh

which will install it under the specified directory (absolute path
is required).

------------------------------
OUT-OF-SOURCE BUILDING
------------------------------
The recommended way to build Sh is to create a new empty directory and run
the configure script from there.

For example if sh has been uncompressed in ~/src/sh/:

  cd $HOME/src/
  mkdir sh-debug
  cd sh-debug
  ../sh/configure --prefix=$HOME/install/sh

The main advantage of this way of building Sh is that you can have two
different versions of Sh with only one copy of the source code.  For
example:

  cd $HOME/src/
  mkdir sh-debug
  cd sh-debug
  ../sh/configure --prefix=$HOME/install/sh --enable-debug

  cd $HOME/src/
  mkdir sh-release
  cd sh-release
  ../sh/configure --prefix=$HOME/install/sh --disable-debug

------------------------------
DEVELOPMENT
------------------------------
If compiling from SVN, first run:
  ./bootstrap
(also run this if you change any Makefile.am or the configure.ac)

You will need recent versions of autoconf, automake, libtool and
libltdl.

Ignore the message about needing to run aclocal.

------------------------------
REGRESSION TESTS
------------------------------
Extra requirement: Python

To run the test suite on the arb backend:

  make install
  SH_REGRESS_BACKEND=arb make regress

To run it on all backends:
  make regressall

Note that "make regress" will use the currently installed version of
Sh.  If you wish to test a new version before installing it, you
can install it to a temporary location with a custom prefix:

  ./configure --prefix=/tmp/sh-test

and then run "make regress" on it.

==============================
MORE HELP
==============================

See the homepage at
  http://libsh.org/
and the wiki at 
  http://www.libsh.org/wiki/
