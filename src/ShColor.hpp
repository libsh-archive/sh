// WARNING - DO NOT EDIT THIS FILE:
// This file was automatically generated from scripts/ShColor.hpp.py.
// If you wish to change it, edit that file instead.
//
// ---
//
// Sh: A GPU metaprogramming language.
//
// Copyright (c) 2003 University of Waterloo Computer Graphics Laboratory
// Project administrator: Michael D. McCool
// Authors: Zheng Qin, Stefanus Du Toit, Kevin Moule, Tiberiu S. Popa,
//          Michael D. McCool
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must
// not claim that you wrote the original software. If you use this
// software in a product, an acknowledgment in the product documentation
// would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such, and must
// not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source
// distribution.
//////////////////////////////////////////////////////////////////////////////

#ifndef SH_SHCOLOR_HPP
#define SH_SHCOLOR_HPP

#include "ShAttrib.hpp"
namespace SH {

/** An n-color.
 * 
 *
 */
template<int N, ShBindingType Binding, ShValueType V=SH_FLOAT, bool Swizzled=false>
class ShColor : public ShAttrib<N, Binding, V, Swizzled> {
public:
  static const ShValueType value_type = V;
  static const ShBindingType binding_type = Binding;
  static const ShSemanticType semantic_type = SH_COLOR;
  typedef typename ShHostType<V>::type H; 
  typedef H HostType; 
  typedef typename ShMemType<V>::type MemType; 
  static const int typesize = N;

  typedef ShColor<N, SH_INPUT, V> InputType;
  typedef ShColor<N, SH_OUTPUT, V> OutputType;
  typedef ShColor<N, SH_INOUT, V> InOutType;
  typedef ShColor<N, SH_TEMP, V> TempType;
  typedef ShColor<N, SH_CONST, V> ConstType;
  ShColor();
  
  template<ShValueType V2>
  ShColor(const ShGeneric<N, V2>& other);
  ShColor(const ShColor<N, Binding, V, Swizzled>& other);
  
  template<ShValueType V2>
  ShColor(const ShColor<N, Binding, V2, Swizzled>& other);
  ShColor(const ShVariableNodePtr& node, const ShSwizzle& swizzle, bool neg);
  explicit ShColor(H data[N]);
  
  ~ShColor();

  
  template<ShValueType V2>
  ShColor& operator=(const ShGeneric<N, V2>& other);
  
  template<ShValueType V2>
  ShColor& operator=(const ShColor<N, Binding, V2, Swizzled>& other);
  ShColor& operator=(const ShColor<N, Binding, V, Swizzled>& other);

  ShColor& operator=(const ShProgram& prg);

  
  template<ShValueType V2>
  ShColor& operator+=(const ShGeneric<N, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator-=(const ShGeneric<N, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator*=(const ShGeneric<N, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator/=(const ShGeneric<N, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator%=(const ShGeneric<N, V2>& right);
  ShColor& operator*=(H);
  ShColor& operator/=(H);
  ShColor& operator%=(H);
  ShColor& operator+=(H);
  ShColor& operator-=(H);
  
  template<ShValueType V2>
  ShColor& operator+=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator-=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator*=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator/=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator%=(const ShGeneric<1, V2>&);
  ShColor<1, Binding, V, true> operator()(int) const;
  ShColor<2, Binding, V, true> operator()(int, int) const;
  ShColor<3, Binding, V, true> operator()(int, int, int) const;
  ShColor<4, Binding, V, true> operator()(int, int, int, int) const;
  ShColor<1, Binding, V, true> operator[](int) const;
  
  template<int N2>
  ShColor<N2, Binding, V, true> swiz(int indices[]) const;
  
  ShColor operator-() const;
  private:
    typedef ShAttrib<N, Binding, V, Swizzled> ParentType;
};

template<ShBindingType Binding, ShValueType V, bool Swizzled>
class ShColor<1, Binding, V, Swizzled> : public ShAttrib<1, Binding, V, Swizzled> {
public:
  static const ShValueType value_type = V;
  static const ShBindingType binding_type = Binding;
  static const ShSemanticType semantic_type = SH_COLOR;
  typedef typename ShHostType<V>::type H; 
  typedef H HostType; 
  typedef typename ShMemType<V>::type MemType; 
  static const int typesize = 1;

  typedef ShColor<1, SH_INPUT, V> InputType;
  typedef ShColor<1, SH_OUTPUT, V> OutputType;
  typedef ShColor<1, SH_INOUT, V> InOutType;
  typedef ShColor<1, SH_TEMP, V> TempType;
  typedef ShColor<1, SH_CONST, V> ConstType;
  ShColor();
  
  template<ShValueType V2>
  ShColor(const ShGeneric<1, V2>& other);
  ShColor(const ShColor<1, Binding, V, Swizzled>& other);
  
  template<ShValueType V2>
  ShColor(const ShColor<1, Binding, V2, Swizzled>& other);
  ShColor(const ShVariableNodePtr& node, const ShSwizzle& swizzle, bool neg);
  explicit ShColor(H data[1]);
  
  ShColor(H);
  
  ~ShColor();

  
  template<ShValueType V2>
  ShColor& operator=(const ShGeneric<1, V2>& other);
  
  template<ShValueType V2>
  ShColor& operator=(const ShColor<1, Binding, V2, Swizzled>& other);
  ShColor& operator=(const ShColor<1, Binding, V, Swizzled>& other);

  ShColor& operator=(H other);

  ShColor& operator=(const ShProgram& prg);

  
  template<ShValueType V2>
  ShColor& operator+=(const ShGeneric<1, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator-=(const ShGeneric<1, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator*=(const ShGeneric<1, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator/=(const ShGeneric<1, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator%=(const ShGeneric<1, V2>& right);
  ShColor& operator*=(H);
  ShColor& operator/=(H);
  ShColor& operator%=(H);
  ShColor& operator+=(H);
  ShColor& operator-=(H);
  ShColor<1, Binding, V, true> operator()(int) const;
  ShColor<2, Binding, V, true> operator()(int, int) const;
  ShColor<3, Binding, V, true> operator()(int, int, int) const;
  ShColor<4, Binding, V, true> operator()(int, int, int, int) const;
  ShColor<1, Binding, V, true> operator[](int) const;
  
  template<int N2>
  ShColor<N2, Binding, V, true> swiz(int indices[]) const;
  
  ShColor operator-() const;
  private:
    typedef ShAttrib<1, Binding, V, Swizzled> ParentType;
};

template<ShBindingType Binding, ShValueType V, bool Swizzled>
class ShColor<2, Binding, V, Swizzled> : public ShAttrib<2, Binding, V, Swizzled> {
public:
  static const ShValueType value_type = V;
  static const ShBindingType binding_type = Binding;
  static const ShSemanticType semantic_type = SH_COLOR;
  typedef typename ShHostType<V>::type H; 
  typedef H HostType; 
  typedef typename ShMemType<V>::type MemType; 
  static const int typesize = 2;

  typedef ShColor<2, SH_INPUT, V> InputType;
  typedef ShColor<2, SH_OUTPUT, V> OutputType;
  typedef ShColor<2, SH_INOUT, V> InOutType;
  typedef ShColor<2, SH_TEMP, V> TempType;
  typedef ShColor<2, SH_CONST, V> ConstType;
  ShColor();
  
  template<ShValueType V2>
  ShColor(const ShGeneric<2, V2>& other);
  ShColor(const ShColor<2, Binding, V, Swizzled>& other);
  
  template<ShValueType V2>
  ShColor(const ShColor<2, Binding, V2, Swizzled>& other);
  ShColor(const ShVariableNodePtr& node, const ShSwizzle& swizzle, bool neg);
  explicit ShColor(H data[2]);
  
  ShColor(H, H);
  template<ShValueType V2, ShValueType V3>
  ShColor(const ShGeneric<1, V2>&, const ShGeneric<1, V3>&);
  
  ~ShColor();

  
  template<ShValueType V2>
  ShColor& operator=(const ShGeneric<2, V2>& other);
  
  template<ShValueType V2>
  ShColor& operator=(const ShColor<2, Binding, V2, Swizzled>& other);
  ShColor& operator=(const ShColor<2, Binding, V, Swizzled>& other);

  ShColor& operator=(const ShProgram& prg);

  
  template<ShValueType V2>
  ShColor& operator+=(const ShGeneric<2, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator-=(const ShGeneric<2, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator*=(const ShGeneric<2, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator/=(const ShGeneric<2, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator%=(const ShGeneric<2, V2>& right);
  ShColor& operator*=(H);
  ShColor& operator/=(H);
  ShColor& operator%=(H);
  ShColor& operator+=(H);
  ShColor& operator-=(H);
  
  template<ShValueType V2>
  ShColor& operator+=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator-=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator*=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator/=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator%=(const ShGeneric<1, V2>&);
  ShColor<1, Binding, V, true> operator()(int) const;
  ShColor<2, Binding, V, true> operator()(int, int) const;
  ShColor<3, Binding, V, true> operator()(int, int, int) const;
  ShColor<4, Binding, V, true> operator()(int, int, int, int) const;
  ShColor<1, Binding, V, true> operator[](int) const;
  
  template<int N2>
  ShColor<N2, Binding, V, true> swiz(int indices[]) const;
  
  ShColor operator-() const;
  private:
    typedef ShAttrib<2, Binding, V, Swizzled> ParentType;
};

template<ShBindingType Binding, ShValueType V, bool Swizzled>
class ShColor<3, Binding, V, Swizzled> : public ShAttrib<3, Binding, V, Swizzled> {
public:
  static const ShValueType value_type = V;
  static const ShBindingType binding_type = Binding;
  static const ShSemanticType semantic_type = SH_COLOR;
  typedef typename ShHostType<V>::type H; 
  typedef H HostType; 
  typedef typename ShMemType<V>::type MemType; 
  static const int typesize = 3;

  typedef ShColor<3, SH_INPUT, V> InputType;
  typedef ShColor<3, SH_OUTPUT, V> OutputType;
  typedef ShColor<3, SH_INOUT, V> InOutType;
  typedef ShColor<3, SH_TEMP, V> TempType;
  typedef ShColor<3, SH_CONST, V> ConstType;
  ShColor();
  
  template<ShValueType V2>
  ShColor(const ShGeneric<3, V2>& other);
  ShColor(const ShColor<3, Binding, V, Swizzled>& other);
  
  template<ShValueType V2>
  ShColor(const ShColor<3, Binding, V2, Swizzled>& other);
  ShColor(const ShVariableNodePtr& node, const ShSwizzle& swizzle, bool neg);
  explicit ShColor(H data[3]);
  
  ShColor(H, H, H);
  template<ShValueType V2, ShValueType V3, ShValueType V4>
  ShColor(const ShGeneric<1, V2>&, const ShGeneric<1, V3>&, const ShGeneric<1, V4>&);
  
  ~ShColor();

  
  template<ShValueType V2>
  ShColor& operator=(const ShGeneric<3, V2>& other);
  
  template<ShValueType V2>
  ShColor& operator=(const ShColor<3, Binding, V2, Swizzled>& other);
  ShColor& operator=(const ShColor<3, Binding, V, Swizzled>& other);

  ShColor& operator=(const ShProgram& prg);

  
  template<ShValueType V2>
  ShColor& operator+=(const ShGeneric<3, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator-=(const ShGeneric<3, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator*=(const ShGeneric<3, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator/=(const ShGeneric<3, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator%=(const ShGeneric<3, V2>& right);
  ShColor& operator*=(H);
  ShColor& operator/=(H);
  ShColor& operator%=(H);
  ShColor& operator+=(H);
  ShColor& operator-=(H);
  
  template<ShValueType V2>
  ShColor& operator+=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator-=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator*=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator/=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator%=(const ShGeneric<1, V2>&);
  ShColor<1, Binding, V, true> operator()(int) const;
  ShColor<2, Binding, V, true> operator()(int, int) const;
  ShColor<3, Binding, V, true> operator()(int, int, int) const;
  ShColor<4, Binding, V, true> operator()(int, int, int, int) const;
  ShColor<1, Binding, V, true> operator[](int) const;
  
  template<int N2>
  ShColor<N2, Binding, V, true> swiz(int indices[]) const;
  
  ShColor operator-() const;
  private:
    typedef ShAttrib<3, Binding, V, Swizzled> ParentType;
};

template<ShBindingType Binding, ShValueType V, bool Swizzled>
class ShColor<4, Binding, V, Swizzled> : public ShAttrib<4, Binding, V, Swizzled> {
public:
  static const ShValueType value_type = V;
  static const ShBindingType binding_type = Binding;
  static const ShSemanticType semantic_type = SH_COLOR;
  typedef typename ShHostType<V>::type H; 
  typedef H HostType; 
  typedef typename ShMemType<V>::type MemType; 
  static const int typesize = 4;

  typedef ShColor<4, SH_INPUT, V> InputType;
  typedef ShColor<4, SH_OUTPUT, V> OutputType;
  typedef ShColor<4, SH_INOUT, V> InOutType;
  typedef ShColor<4, SH_TEMP, V> TempType;
  typedef ShColor<4, SH_CONST, V> ConstType;
  ShColor();
  
  template<ShValueType V2>
  ShColor(const ShGeneric<4, V2>& other);
  ShColor(const ShColor<4, Binding, V, Swizzled>& other);
  
  template<ShValueType V2>
  ShColor(const ShColor<4, Binding, V2, Swizzled>& other);
  ShColor(const ShVariableNodePtr& node, const ShSwizzle& swizzle, bool neg);
  explicit ShColor(H data[4]);
  
  ShColor(H, H, H, H);
  template<ShValueType V2, ShValueType V3, ShValueType V4, ShValueType V5>
  ShColor(const ShGeneric<1, V2>&, const ShGeneric<1, V3>&, const ShGeneric<1, V4>&, const ShGeneric<1, V5>&);
  
  ~ShColor();

  
  template<ShValueType V2>
  ShColor& operator=(const ShGeneric<4, V2>& other);
  
  template<ShValueType V2>
  ShColor& operator=(const ShColor<4, Binding, V2, Swizzled>& other);
  ShColor& operator=(const ShColor<4, Binding, V, Swizzled>& other);

  ShColor& operator=(const ShProgram& prg);

  
  template<ShValueType V2>
  ShColor& operator+=(const ShGeneric<4, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator-=(const ShGeneric<4, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator*=(const ShGeneric<4, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator/=(const ShGeneric<4, V2>& right);
  
  template<ShValueType V2>
  ShColor& operator%=(const ShGeneric<4, V2>& right);
  ShColor& operator*=(H);
  ShColor& operator/=(H);
  ShColor& operator%=(H);
  ShColor& operator+=(H);
  ShColor& operator-=(H);
  
  template<ShValueType V2>
  ShColor& operator+=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator-=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator*=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator/=(const ShGeneric<1, V2>&);
  
  template<ShValueType V2>
  ShColor& operator%=(const ShGeneric<1, V2>&);
  ShColor<1, Binding, V, true> operator()(int) const;
  ShColor<2, Binding, V, true> operator()(int, int) const;
  ShColor<3, Binding, V, true> operator()(int, int, int) const;
  ShColor<4, Binding, V, true> operator()(int, int, int, int) const;
  ShColor<1, Binding, V, true> operator[](int) const;
  
  template<int N2>
  ShColor<N2, Binding, V, true> swiz(int indices[]) const;
  
  ShColor operator-() const;
  private:
    typedef ShAttrib<4, Binding, V, Swizzled> ParentType;
};

typedef ShColor<1, SH_INPUT, SH_SHORT> ShInputColor1s;
typedef ShColor<1, SH_OUTPUT, SH_SHORT> ShOutputColor1s;
typedef ShColor<1, SH_INOUT, SH_SHORT> ShInOutColor1s;
typedef ShColor<1, SH_TEMP, SH_SHORT> ShColor1s;
typedef ShColor<1, SH_CONST, SH_SHORT> ShConstColor1s;
typedef ShColor<2, SH_INPUT, SH_SHORT> ShInputColor2s;
typedef ShColor<2, SH_OUTPUT, SH_SHORT> ShOutputColor2s;
typedef ShColor<2, SH_INOUT, SH_SHORT> ShInOutColor2s;
typedef ShColor<2, SH_TEMP, SH_SHORT> ShColor2s;
typedef ShColor<2, SH_CONST, SH_SHORT> ShConstColor2s;
typedef ShColor<3, SH_INPUT, SH_SHORT> ShInputColor3s;
typedef ShColor<3, SH_OUTPUT, SH_SHORT> ShOutputColor3s;
typedef ShColor<3, SH_INOUT, SH_SHORT> ShInOutColor3s;
typedef ShColor<3, SH_TEMP, SH_SHORT> ShColor3s;
typedef ShColor<3, SH_CONST, SH_SHORT> ShConstColor3s;
typedef ShColor<4, SH_INPUT, SH_SHORT> ShInputColor4s;
typedef ShColor<4, SH_OUTPUT, SH_SHORT> ShOutputColor4s;
typedef ShColor<4, SH_INOUT, SH_SHORT> ShInOutColor4s;
typedef ShColor<4, SH_TEMP, SH_SHORT> ShColor4s;
typedef ShColor<4, SH_CONST, SH_SHORT> ShConstColor4s;


typedef ShColor<1, SH_INPUT, SH_FRAC_UINT> ShInputColor1fui;
typedef ShColor<1, SH_OUTPUT, SH_FRAC_UINT> ShOutputColor1fui;
typedef ShColor<1, SH_INOUT, SH_FRAC_UINT> ShInOutColor1fui;
typedef ShColor<1, SH_TEMP, SH_FRAC_UINT> ShColor1fui;
typedef ShColor<1, SH_CONST, SH_FRAC_UINT> ShConstColor1fui;
typedef ShColor<2, SH_INPUT, SH_FRAC_UINT> ShInputColor2fui;
typedef ShColor<2, SH_OUTPUT, SH_FRAC_UINT> ShOutputColor2fui;
typedef ShColor<2, SH_INOUT, SH_FRAC_UINT> ShInOutColor2fui;
typedef ShColor<2, SH_TEMP, SH_FRAC_UINT> ShColor2fui;
typedef ShColor<2, SH_CONST, SH_FRAC_UINT> ShConstColor2fui;
typedef ShColor<3, SH_INPUT, SH_FRAC_UINT> ShInputColor3fui;
typedef ShColor<3, SH_OUTPUT, SH_FRAC_UINT> ShOutputColor3fui;
typedef ShColor<3, SH_INOUT, SH_FRAC_UINT> ShInOutColor3fui;
typedef ShColor<3, SH_TEMP, SH_FRAC_UINT> ShColor3fui;
typedef ShColor<3, SH_CONST, SH_FRAC_UINT> ShConstColor3fui;
typedef ShColor<4, SH_INPUT, SH_FRAC_UINT> ShInputColor4fui;
typedef ShColor<4, SH_OUTPUT, SH_FRAC_UINT> ShOutputColor4fui;
typedef ShColor<4, SH_INOUT, SH_FRAC_UINT> ShInOutColor4fui;
typedef ShColor<4, SH_TEMP, SH_FRAC_UINT> ShColor4fui;
typedef ShColor<4, SH_CONST, SH_FRAC_UINT> ShConstColor4fui;


typedef ShColor<1, SH_INPUT, SH_FRAC_BYTE> ShInputColor1fb;
typedef ShColor<1, SH_OUTPUT, SH_FRAC_BYTE> ShOutputColor1fb;
typedef ShColor<1, SH_INOUT, SH_FRAC_BYTE> ShInOutColor1fb;
typedef ShColor<1, SH_TEMP, SH_FRAC_BYTE> ShColor1fb;
typedef ShColor<1, SH_CONST, SH_FRAC_BYTE> ShConstColor1fb;
typedef ShColor<2, SH_INPUT, SH_FRAC_BYTE> ShInputColor2fb;
typedef ShColor<2, SH_OUTPUT, SH_FRAC_BYTE> ShOutputColor2fb;
typedef ShColor<2, SH_INOUT, SH_FRAC_BYTE> ShInOutColor2fb;
typedef ShColor<2, SH_TEMP, SH_FRAC_BYTE> ShColor2fb;
typedef ShColor<2, SH_CONST, SH_FRAC_BYTE> ShConstColor2fb;
typedef ShColor<3, SH_INPUT, SH_FRAC_BYTE> ShInputColor3fb;
typedef ShColor<3, SH_OUTPUT, SH_FRAC_BYTE> ShOutputColor3fb;
typedef ShColor<3, SH_INOUT, SH_FRAC_BYTE> ShInOutColor3fb;
typedef ShColor<3, SH_TEMP, SH_FRAC_BYTE> ShColor3fb;
typedef ShColor<3, SH_CONST, SH_FRAC_BYTE> ShConstColor3fb;
typedef ShColor<4, SH_INPUT, SH_FRAC_BYTE> ShInputColor4fb;
typedef ShColor<4, SH_OUTPUT, SH_FRAC_BYTE> ShOutputColor4fb;
typedef ShColor<4, SH_INOUT, SH_FRAC_BYTE> ShInOutColor4fb;
typedef ShColor<4, SH_TEMP, SH_FRAC_BYTE> ShColor4fb;
typedef ShColor<4, SH_CONST, SH_FRAC_BYTE> ShConstColor4fb;


typedef ShColor<1, SH_INPUT, SH_FRAC_UBYTE> ShInputColor1fub;
typedef ShColor<1, SH_OUTPUT, SH_FRAC_UBYTE> ShOutputColor1fub;
typedef ShColor<1, SH_INOUT, SH_FRAC_UBYTE> ShInOutColor1fub;
typedef ShColor<1, SH_TEMP, SH_FRAC_UBYTE> ShColor1fub;
typedef ShColor<1, SH_CONST, SH_FRAC_UBYTE> ShConstColor1fub;
typedef ShColor<2, SH_INPUT, SH_FRAC_UBYTE> ShInputColor2fub;
typedef ShColor<2, SH_OUTPUT, SH_FRAC_UBYTE> ShOutputColor2fub;
typedef ShColor<2, SH_INOUT, SH_FRAC_UBYTE> ShInOutColor2fub;
typedef ShColor<2, SH_TEMP, SH_FRAC_UBYTE> ShColor2fub;
typedef ShColor<2, SH_CONST, SH_FRAC_UBYTE> ShConstColor2fub;
typedef ShColor<3, SH_INPUT, SH_FRAC_UBYTE> ShInputColor3fub;
typedef ShColor<3, SH_OUTPUT, SH_FRAC_UBYTE> ShOutputColor3fub;
typedef ShColor<3, SH_INOUT, SH_FRAC_UBYTE> ShInOutColor3fub;
typedef ShColor<3, SH_TEMP, SH_FRAC_UBYTE> ShColor3fub;
typedef ShColor<3, SH_CONST, SH_FRAC_UBYTE> ShConstColor3fub;
typedef ShColor<4, SH_INPUT, SH_FRAC_UBYTE> ShInputColor4fub;
typedef ShColor<4, SH_OUTPUT, SH_FRAC_UBYTE> ShOutputColor4fub;
typedef ShColor<4, SH_INOUT, SH_FRAC_UBYTE> ShInOutColor4fub;
typedef ShColor<4, SH_TEMP, SH_FRAC_UBYTE> ShColor4fub;
typedef ShColor<4, SH_CONST, SH_FRAC_UBYTE> ShConstColor4fub;


typedef ShColor<1, SH_INPUT, SH_HALF> ShInputColor1h;
typedef ShColor<1, SH_OUTPUT, SH_HALF> ShOutputColor1h;
typedef ShColor<1, SH_INOUT, SH_HALF> ShInOutColor1h;
typedef ShColor<1, SH_TEMP, SH_HALF> ShColor1h;
typedef ShColor<1, SH_CONST, SH_HALF> ShConstColor1h;
typedef ShColor<2, SH_INPUT, SH_HALF> ShInputColor2h;
typedef ShColor<2, SH_OUTPUT, SH_HALF> ShOutputColor2h;
typedef ShColor<2, SH_INOUT, SH_HALF> ShInOutColor2h;
typedef ShColor<2, SH_TEMP, SH_HALF> ShColor2h;
typedef ShColor<2, SH_CONST, SH_HALF> ShConstColor2h;
typedef ShColor<3, SH_INPUT, SH_HALF> ShInputColor3h;
typedef ShColor<3, SH_OUTPUT, SH_HALF> ShOutputColor3h;
typedef ShColor<3, SH_INOUT, SH_HALF> ShInOutColor3h;
typedef ShColor<3, SH_TEMP, SH_HALF> ShColor3h;
typedef ShColor<3, SH_CONST, SH_HALF> ShConstColor3h;
typedef ShColor<4, SH_INPUT, SH_HALF> ShInputColor4h;
typedef ShColor<4, SH_OUTPUT, SH_HALF> ShOutputColor4h;
typedef ShColor<4, SH_INOUT, SH_HALF> ShInOutColor4h;
typedef ShColor<4, SH_TEMP, SH_HALF> ShColor4h;
typedef ShColor<4, SH_CONST, SH_HALF> ShConstColor4h;


typedef ShColor<1, SH_INPUT, SH_INT> ShInputColor1i;
typedef ShColor<1, SH_OUTPUT, SH_INT> ShOutputColor1i;
typedef ShColor<1, SH_INOUT, SH_INT> ShInOutColor1i;
typedef ShColor<1, SH_TEMP, SH_INT> ShColor1i;
typedef ShColor<1, SH_CONST, SH_INT> ShConstColor1i;
typedef ShColor<2, SH_INPUT, SH_INT> ShInputColor2i;
typedef ShColor<2, SH_OUTPUT, SH_INT> ShOutputColor2i;
typedef ShColor<2, SH_INOUT, SH_INT> ShInOutColor2i;
typedef ShColor<2, SH_TEMP, SH_INT> ShColor2i;
typedef ShColor<2, SH_CONST, SH_INT> ShConstColor2i;
typedef ShColor<3, SH_INPUT, SH_INT> ShInputColor3i;
typedef ShColor<3, SH_OUTPUT, SH_INT> ShOutputColor3i;
typedef ShColor<3, SH_INOUT, SH_INT> ShInOutColor3i;
typedef ShColor<3, SH_TEMP, SH_INT> ShColor3i;
typedef ShColor<3, SH_CONST, SH_INT> ShConstColor3i;
typedef ShColor<4, SH_INPUT, SH_INT> ShInputColor4i;
typedef ShColor<4, SH_OUTPUT, SH_INT> ShOutputColor4i;
typedef ShColor<4, SH_INOUT, SH_INT> ShInOutColor4i;
typedef ShColor<4, SH_TEMP, SH_INT> ShColor4i;
typedef ShColor<4, SH_CONST, SH_INT> ShConstColor4i;


typedef ShColor<1, SH_INPUT, SH_FLOAT> ShInputColor1f;
typedef ShColor<1, SH_OUTPUT, SH_FLOAT> ShOutputColor1f;
typedef ShColor<1, SH_INOUT, SH_FLOAT> ShInOutColor1f;
typedef ShColor<1, SH_TEMP, SH_FLOAT> ShColor1f;
typedef ShColor<1, SH_CONST, SH_FLOAT> ShConstColor1f;
typedef ShColor<2, SH_INPUT, SH_FLOAT> ShInputColor2f;
typedef ShColor<2, SH_OUTPUT, SH_FLOAT> ShOutputColor2f;
typedef ShColor<2, SH_INOUT, SH_FLOAT> ShInOutColor2f;
typedef ShColor<2, SH_TEMP, SH_FLOAT> ShColor2f;
typedef ShColor<2, SH_CONST, SH_FLOAT> ShConstColor2f;
typedef ShColor<3, SH_INPUT, SH_FLOAT> ShInputColor3f;
typedef ShColor<3, SH_OUTPUT, SH_FLOAT> ShOutputColor3f;
typedef ShColor<3, SH_INOUT, SH_FLOAT> ShInOutColor3f;
typedef ShColor<3, SH_TEMP, SH_FLOAT> ShColor3f;
typedef ShColor<3, SH_CONST, SH_FLOAT> ShConstColor3f;
typedef ShColor<4, SH_INPUT, SH_FLOAT> ShInputColor4f;
typedef ShColor<4, SH_OUTPUT, SH_FLOAT> ShOutputColor4f;
typedef ShColor<4, SH_INOUT, SH_FLOAT> ShInOutColor4f;
typedef ShColor<4, SH_TEMP, SH_FLOAT> ShColor4f;
typedef ShColor<4, SH_CONST, SH_FLOAT> ShConstColor4f;


typedef ShColor<1, SH_INPUT, SH_BYTE> ShInputColor1b;
typedef ShColor<1, SH_OUTPUT, SH_BYTE> ShOutputColor1b;
typedef ShColor<1, SH_INOUT, SH_BYTE> ShInOutColor1b;
typedef ShColor<1, SH_TEMP, SH_BYTE> ShColor1b;
typedef ShColor<1, SH_CONST, SH_BYTE> ShConstColor1b;
typedef ShColor<2, SH_INPUT, SH_BYTE> ShInputColor2b;
typedef ShColor<2, SH_OUTPUT, SH_BYTE> ShOutputColor2b;
typedef ShColor<2, SH_INOUT, SH_BYTE> ShInOutColor2b;
typedef ShColor<2, SH_TEMP, SH_BYTE> ShColor2b;
typedef ShColor<2, SH_CONST, SH_BYTE> ShConstColor2b;
typedef ShColor<3, SH_INPUT, SH_BYTE> ShInputColor3b;
typedef ShColor<3, SH_OUTPUT, SH_BYTE> ShOutputColor3b;
typedef ShColor<3, SH_INOUT, SH_BYTE> ShInOutColor3b;
typedef ShColor<3, SH_TEMP, SH_BYTE> ShColor3b;
typedef ShColor<3, SH_CONST, SH_BYTE> ShConstColor3b;
typedef ShColor<4, SH_INPUT, SH_BYTE> ShInputColor4b;
typedef ShColor<4, SH_OUTPUT, SH_BYTE> ShOutputColor4b;
typedef ShColor<4, SH_INOUT, SH_BYTE> ShInOutColor4b;
typedef ShColor<4, SH_TEMP, SH_BYTE> ShColor4b;
typedef ShColor<4, SH_CONST, SH_BYTE> ShConstColor4b;


typedef ShColor<1, SH_INPUT, SH_INTERVAL_DOUBLE> ShInputColor1i_d;
typedef ShColor<1, SH_OUTPUT, SH_INTERVAL_DOUBLE> ShOutputColor1i_d;
typedef ShColor<1, SH_INOUT, SH_INTERVAL_DOUBLE> ShInOutColor1i_d;
typedef ShColor<1, SH_TEMP, SH_INTERVAL_DOUBLE> ShColor1i_d;
typedef ShColor<1, SH_CONST, SH_INTERVAL_DOUBLE> ShConstColor1i_d;
typedef ShColor<2, SH_INPUT, SH_INTERVAL_DOUBLE> ShInputColor2i_d;
typedef ShColor<2, SH_OUTPUT, SH_INTERVAL_DOUBLE> ShOutputColor2i_d;
typedef ShColor<2, SH_INOUT, SH_INTERVAL_DOUBLE> ShInOutColor2i_d;
typedef ShColor<2, SH_TEMP, SH_INTERVAL_DOUBLE> ShColor2i_d;
typedef ShColor<2, SH_CONST, SH_INTERVAL_DOUBLE> ShConstColor2i_d;
typedef ShColor<3, SH_INPUT, SH_INTERVAL_DOUBLE> ShInputColor3i_d;
typedef ShColor<3, SH_OUTPUT, SH_INTERVAL_DOUBLE> ShOutputColor3i_d;
typedef ShColor<3, SH_INOUT, SH_INTERVAL_DOUBLE> ShInOutColor3i_d;
typedef ShColor<3, SH_TEMP, SH_INTERVAL_DOUBLE> ShColor3i_d;
typedef ShColor<3, SH_CONST, SH_INTERVAL_DOUBLE> ShConstColor3i_d;
typedef ShColor<4, SH_INPUT, SH_INTERVAL_DOUBLE> ShInputColor4i_d;
typedef ShColor<4, SH_OUTPUT, SH_INTERVAL_DOUBLE> ShOutputColor4i_d;
typedef ShColor<4, SH_INOUT, SH_INTERVAL_DOUBLE> ShInOutColor4i_d;
typedef ShColor<4, SH_TEMP, SH_INTERVAL_DOUBLE> ShColor4i_d;
typedef ShColor<4, SH_CONST, SH_INTERVAL_DOUBLE> ShConstColor4i_d;


typedef ShColor<1, SH_INPUT, SH_FRAC_USHORT> ShInputColor1fus;
typedef ShColor<1, SH_OUTPUT, SH_FRAC_USHORT> ShOutputColor1fus;
typedef ShColor<1, SH_INOUT, SH_FRAC_USHORT> ShInOutColor1fus;
typedef ShColor<1, SH_TEMP, SH_FRAC_USHORT> ShColor1fus;
typedef ShColor<1, SH_CONST, SH_FRAC_USHORT> ShConstColor1fus;
typedef ShColor<2, SH_INPUT, SH_FRAC_USHORT> ShInputColor2fus;
typedef ShColor<2, SH_OUTPUT, SH_FRAC_USHORT> ShOutputColor2fus;
typedef ShColor<2, SH_INOUT, SH_FRAC_USHORT> ShInOutColor2fus;
typedef ShColor<2, SH_TEMP, SH_FRAC_USHORT> ShColor2fus;
typedef ShColor<2, SH_CONST, SH_FRAC_USHORT> ShConstColor2fus;
typedef ShColor<3, SH_INPUT, SH_FRAC_USHORT> ShInputColor3fus;
typedef ShColor<3, SH_OUTPUT, SH_FRAC_USHORT> ShOutputColor3fus;
typedef ShColor<3, SH_INOUT, SH_FRAC_USHORT> ShInOutColor3fus;
typedef ShColor<3, SH_TEMP, SH_FRAC_USHORT> ShColor3fus;
typedef ShColor<3, SH_CONST, SH_FRAC_USHORT> ShConstColor3fus;
typedef ShColor<4, SH_INPUT, SH_FRAC_USHORT> ShInputColor4fus;
typedef ShColor<4, SH_OUTPUT, SH_FRAC_USHORT> ShOutputColor4fus;
typedef ShColor<4, SH_INOUT, SH_FRAC_USHORT> ShInOutColor4fus;
typedef ShColor<4, SH_TEMP, SH_FRAC_USHORT> ShColor4fus;
typedef ShColor<4, SH_CONST, SH_FRAC_USHORT> ShConstColor4fus;


typedef ShColor<1, SH_INPUT, SH_UBYTE> ShInputColor1ub;
typedef ShColor<1, SH_OUTPUT, SH_UBYTE> ShOutputColor1ub;
typedef ShColor<1, SH_INOUT, SH_UBYTE> ShInOutColor1ub;
typedef ShColor<1, SH_TEMP, SH_UBYTE> ShColor1ub;
typedef ShColor<1, SH_CONST, SH_UBYTE> ShConstColor1ub;
typedef ShColor<2, SH_INPUT, SH_UBYTE> ShInputColor2ub;
typedef ShColor<2, SH_OUTPUT, SH_UBYTE> ShOutputColor2ub;
typedef ShColor<2, SH_INOUT, SH_UBYTE> ShInOutColor2ub;
typedef ShColor<2, SH_TEMP, SH_UBYTE> ShColor2ub;
typedef ShColor<2, SH_CONST, SH_UBYTE> ShConstColor2ub;
typedef ShColor<3, SH_INPUT, SH_UBYTE> ShInputColor3ub;
typedef ShColor<3, SH_OUTPUT, SH_UBYTE> ShOutputColor3ub;
typedef ShColor<3, SH_INOUT, SH_UBYTE> ShInOutColor3ub;
typedef ShColor<3, SH_TEMP, SH_UBYTE> ShColor3ub;
typedef ShColor<3, SH_CONST, SH_UBYTE> ShConstColor3ub;
typedef ShColor<4, SH_INPUT, SH_UBYTE> ShInputColor4ub;
typedef ShColor<4, SH_OUTPUT, SH_UBYTE> ShOutputColor4ub;
typedef ShColor<4, SH_INOUT, SH_UBYTE> ShInOutColor4ub;
typedef ShColor<4, SH_TEMP, SH_UBYTE> ShColor4ub;
typedef ShColor<4, SH_CONST, SH_UBYTE> ShConstColor4ub;


typedef ShColor<1, SH_INPUT, SH_FRAC_SHORT> ShInputColor1fs;
typedef ShColor<1, SH_OUTPUT, SH_FRAC_SHORT> ShOutputColor1fs;
typedef ShColor<1, SH_INOUT, SH_FRAC_SHORT> ShInOutColor1fs;
typedef ShColor<1, SH_TEMP, SH_FRAC_SHORT> ShColor1fs;
typedef ShColor<1, SH_CONST, SH_FRAC_SHORT> ShConstColor1fs;
typedef ShColor<2, SH_INPUT, SH_FRAC_SHORT> ShInputColor2fs;
typedef ShColor<2, SH_OUTPUT, SH_FRAC_SHORT> ShOutputColor2fs;
typedef ShColor<2, SH_INOUT, SH_FRAC_SHORT> ShInOutColor2fs;
typedef ShColor<2, SH_TEMP, SH_FRAC_SHORT> ShColor2fs;
typedef ShColor<2, SH_CONST, SH_FRAC_SHORT> ShConstColor2fs;
typedef ShColor<3, SH_INPUT, SH_FRAC_SHORT> ShInputColor3fs;
typedef ShColor<3, SH_OUTPUT, SH_FRAC_SHORT> ShOutputColor3fs;
typedef ShColor<3, SH_INOUT, SH_FRAC_SHORT> ShInOutColor3fs;
typedef ShColor<3, SH_TEMP, SH_FRAC_SHORT> ShColor3fs;
typedef ShColor<3, SH_CONST, SH_FRAC_SHORT> ShConstColor3fs;
typedef ShColor<4, SH_INPUT, SH_FRAC_SHORT> ShInputColor4fs;
typedef ShColor<4, SH_OUTPUT, SH_FRAC_SHORT> ShOutputColor4fs;
typedef ShColor<4, SH_INOUT, SH_FRAC_SHORT> ShInOutColor4fs;
typedef ShColor<4, SH_TEMP, SH_FRAC_SHORT> ShColor4fs;
typedef ShColor<4, SH_CONST, SH_FRAC_SHORT> ShConstColor4fs;


typedef ShColor<1, SH_INPUT, SH_USHORT> ShInputColor1us;
typedef ShColor<1, SH_OUTPUT, SH_USHORT> ShOutputColor1us;
typedef ShColor<1, SH_INOUT, SH_USHORT> ShInOutColor1us;
typedef ShColor<1, SH_TEMP, SH_USHORT> ShColor1us;
typedef ShColor<1, SH_CONST, SH_USHORT> ShConstColor1us;
typedef ShColor<2, SH_INPUT, SH_USHORT> ShInputColor2us;
typedef ShColor<2, SH_OUTPUT, SH_USHORT> ShOutputColor2us;
typedef ShColor<2, SH_INOUT, SH_USHORT> ShInOutColor2us;
typedef ShColor<2, SH_TEMP, SH_USHORT> ShColor2us;
typedef ShColor<2, SH_CONST, SH_USHORT> ShConstColor2us;
typedef ShColor<3, SH_INPUT, SH_USHORT> ShInputColor3us;
typedef ShColor<3, SH_OUTPUT, SH_USHORT> ShOutputColor3us;
typedef ShColor<3, SH_INOUT, SH_USHORT> ShInOutColor3us;
typedef ShColor<3, SH_TEMP, SH_USHORT> ShColor3us;
typedef ShColor<3, SH_CONST, SH_USHORT> ShConstColor3us;
typedef ShColor<4, SH_INPUT, SH_USHORT> ShInputColor4us;
typedef ShColor<4, SH_OUTPUT, SH_USHORT> ShOutputColor4us;
typedef ShColor<4, SH_INOUT, SH_USHORT> ShInOutColor4us;
typedef ShColor<4, SH_TEMP, SH_USHORT> ShColor4us;
typedef ShColor<4, SH_CONST, SH_USHORT> ShConstColor4us;


typedef ShColor<1, SH_INPUT, SH_UINT> ShInputColor1ui;
typedef ShColor<1, SH_OUTPUT, SH_UINT> ShOutputColor1ui;
typedef ShColor<1, SH_INOUT, SH_UINT> ShInOutColor1ui;
typedef ShColor<1, SH_TEMP, SH_UINT> ShColor1ui;
typedef ShColor<1, SH_CONST, SH_UINT> ShConstColor1ui;
typedef ShColor<2, SH_INPUT, SH_UINT> ShInputColor2ui;
typedef ShColor<2, SH_OUTPUT, SH_UINT> ShOutputColor2ui;
typedef ShColor<2, SH_INOUT, SH_UINT> ShInOutColor2ui;
typedef ShColor<2, SH_TEMP, SH_UINT> ShColor2ui;
typedef ShColor<2, SH_CONST, SH_UINT> ShConstColor2ui;
typedef ShColor<3, SH_INPUT, SH_UINT> ShInputColor3ui;
typedef ShColor<3, SH_OUTPUT, SH_UINT> ShOutputColor3ui;
typedef ShColor<3, SH_INOUT, SH_UINT> ShInOutColor3ui;
typedef ShColor<3, SH_TEMP, SH_UINT> ShColor3ui;
typedef ShColor<3, SH_CONST, SH_UINT> ShConstColor3ui;
typedef ShColor<4, SH_INPUT, SH_UINT> ShInputColor4ui;
typedef ShColor<4, SH_OUTPUT, SH_UINT> ShOutputColor4ui;
typedef ShColor<4, SH_INOUT, SH_UINT> ShInOutColor4ui;
typedef ShColor<4, SH_TEMP, SH_UINT> ShColor4ui;
typedef ShColor<4, SH_CONST, SH_UINT> ShConstColor4ui;


typedef ShColor<1, SH_INPUT, SH_DOUBLE> ShInputColor1d;
typedef ShColor<1, SH_OUTPUT, SH_DOUBLE> ShOutputColor1d;
typedef ShColor<1, SH_INOUT, SH_DOUBLE> ShInOutColor1d;
typedef ShColor<1, SH_TEMP, SH_DOUBLE> ShColor1d;
typedef ShColor<1, SH_CONST, SH_DOUBLE> ShConstColor1d;
typedef ShColor<2, SH_INPUT, SH_DOUBLE> ShInputColor2d;
typedef ShColor<2, SH_OUTPUT, SH_DOUBLE> ShOutputColor2d;
typedef ShColor<2, SH_INOUT, SH_DOUBLE> ShInOutColor2d;
typedef ShColor<2, SH_TEMP, SH_DOUBLE> ShColor2d;
typedef ShColor<2, SH_CONST, SH_DOUBLE> ShConstColor2d;
typedef ShColor<3, SH_INPUT, SH_DOUBLE> ShInputColor3d;
typedef ShColor<3, SH_OUTPUT, SH_DOUBLE> ShOutputColor3d;
typedef ShColor<3, SH_INOUT, SH_DOUBLE> ShInOutColor3d;
typedef ShColor<3, SH_TEMP, SH_DOUBLE> ShColor3d;
typedef ShColor<3, SH_CONST, SH_DOUBLE> ShConstColor3d;
typedef ShColor<4, SH_INPUT, SH_DOUBLE> ShInputColor4d;
typedef ShColor<4, SH_OUTPUT, SH_DOUBLE> ShOutputColor4d;
typedef ShColor<4, SH_INOUT, SH_DOUBLE> ShInOutColor4d;
typedef ShColor<4, SH_TEMP, SH_DOUBLE> ShColor4d;
typedef ShColor<4, SH_CONST, SH_DOUBLE> ShConstColor4d;


typedef ShColor<1, SH_INPUT, SH_INTERVAL_FLOAT> ShInputColor1i_f;
typedef ShColor<1, SH_OUTPUT, SH_INTERVAL_FLOAT> ShOutputColor1i_f;
typedef ShColor<1, SH_INOUT, SH_INTERVAL_FLOAT> ShInOutColor1i_f;
typedef ShColor<1, SH_TEMP, SH_INTERVAL_FLOAT> ShColor1i_f;
typedef ShColor<1, SH_CONST, SH_INTERVAL_FLOAT> ShConstColor1i_f;
typedef ShColor<2, SH_INPUT, SH_INTERVAL_FLOAT> ShInputColor2i_f;
typedef ShColor<2, SH_OUTPUT, SH_INTERVAL_FLOAT> ShOutputColor2i_f;
typedef ShColor<2, SH_INOUT, SH_INTERVAL_FLOAT> ShInOutColor2i_f;
typedef ShColor<2, SH_TEMP, SH_INTERVAL_FLOAT> ShColor2i_f;
typedef ShColor<2, SH_CONST, SH_INTERVAL_FLOAT> ShConstColor2i_f;
typedef ShColor<3, SH_INPUT, SH_INTERVAL_FLOAT> ShInputColor3i_f;
typedef ShColor<3, SH_OUTPUT, SH_INTERVAL_FLOAT> ShOutputColor3i_f;
typedef ShColor<3, SH_INOUT, SH_INTERVAL_FLOAT> ShInOutColor3i_f;
typedef ShColor<3, SH_TEMP, SH_INTERVAL_FLOAT> ShColor3i_f;
typedef ShColor<3, SH_CONST, SH_INTERVAL_FLOAT> ShConstColor3i_f;
typedef ShColor<4, SH_INPUT, SH_INTERVAL_FLOAT> ShInputColor4i_f;
typedef ShColor<4, SH_OUTPUT, SH_INTERVAL_FLOAT> ShOutputColor4i_f;
typedef ShColor<4, SH_INOUT, SH_INTERVAL_FLOAT> ShInOutColor4i_f;
typedef ShColor<4, SH_TEMP, SH_INTERVAL_FLOAT> ShColor4i_f;
typedef ShColor<4, SH_CONST, SH_INTERVAL_FLOAT> ShConstColor4i_f;


typedef ShColor<1, SH_INPUT, SH_FRAC_INT> ShInputColor1fi;
typedef ShColor<1, SH_OUTPUT, SH_FRAC_INT> ShOutputColor1fi;
typedef ShColor<1, SH_INOUT, SH_FRAC_INT> ShInOutColor1fi;
typedef ShColor<1, SH_TEMP, SH_FRAC_INT> ShColor1fi;
typedef ShColor<1, SH_CONST, SH_FRAC_INT> ShConstColor1fi;
typedef ShColor<2, SH_INPUT, SH_FRAC_INT> ShInputColor2fi;
typedef ShColor<2, SH_OUTPUT, SH_FRAC_INT> ShOutputColor2fi;
typedef ShColor<2, SH_INOUT, SH_FRAC_INT> ShInOutColor2fi;
typedef ShColor<2, SH_TEMP, SH_FRAC_INT> ShColor2fi;
typedef ShColor<2, SH_CONST, SH_FRAC_INT> ShConstColor2fi;
typedef ShColor<3, SH_INPUT, SH_FRAC_INT> ShInputColor3fi;
typedef ShColor<3, SH_OUTPUT, SH_FRAC_INT> ShOutputColor3fi;
typedef ShColor<3, SH_INOUT, SH_FRAC_INT> ShInOutColor3fi;
typedef ShColor<3, SH_TEMP, SH_FRAC_INT> ShColor3fi;
typedef ShColor<3, SH_CONST, SH_FRAC_INT> ShConstColor3fi;
typedef ShColor<4, SH_INPUT, SH_FRAC_INT> ShInputColor4fi;
typedef ShColor<4, SH_OUTPUT, SH_FRAC_INT> ShOutputColor4fi;
typedef ShColor<4, SH_INOUT, SH_FRAC_INT> ShInOutColor4fi;
typedef ShColor<4, SH_TEMP, SH_FRAC_INT> ShColor4fi;
typedef ShColor<4, SH_CONST, SH_FRAC_INT> ShConstColor4fi;



} // namespace SH
#include "ShColorImpl.hpp"

#endif // SH_SHCOLOR_HPP
