// Sh: A GPU metaprogramming language.
//
// Copyright (c) 2003 University of Waterloo Computer Graphics Laboratory
// Project administrator: Michael D. McCool
// Authors: Zheng Qin, Stefanus Du Toit, Kevin Moule, Tiberiu S. Popa,
//          Michael D. McCool
// 
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
// 
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 
// 1. The origin of this software must not be misrepresented; you must
// not claim that you wrote the original software. If you use this
// software in a product, an acknowledgment in the product documentation
// would be appreciated but is not required.
// 
// 2. Altered source versions must be plainly marked as such, and must
// not be misrepresented as being the original software.
// 
// 3. This notice may not be removed or altered from any source
// distribution.
//////////////////////////////////////////////////////////////////////////////
#ifndef SH_INTERVALTEXTURE_HPP
#define SH_INTERVALTEXTURE_HPP

#include <iostream>
#include <string>
#include "ShTextureNode.hpp"
#include "ShVariable.hpp"
#include "ShMemoryDep.hpp"

namespace SH {

/** Turns a regular texture into a interval texture with mip-map like acceleration structure. 
 *
 * Modified from Sylvain's HDRShIntervalTexture.hpp to handle nD textures (but not Rect/Cube yet) 
 * (actually @todo range it only works for 2D and Rect textures)  
 *
 * Since this is for internal use, it works on ShTextureNodes. 
  */
class ShIntervalTexture: public ShMemoryDep {
public:
  ShIntervalTexture(ShTextureNodePtr other);

  struct ArrayAdaptor {
    float *m_data;
    int m_width, m_stride;
    ArrayAdaptor(float* data, int width, int height, int stride): m_data(data), m_width(width), m_stride(stride) {}
    float& operator()(int x, int y, int e) 
    {
      return m_data[e + m_stride * (x + m_width * y)];
    }
  };

  /* Takes the previous level (data at ox, oy, width/height = w, h) and shrinks every dimension in half to produce
   * a new level at nox, noy.
   *
   * The data for the new level is generated by applying the given (should be commutative) functor to the
   * four corresponding elements in the previous level.
   */
  template<typename F>
  void generate_level(ArrayAdaptor &data, int ox, int oy, int width, int height, int stride, int nox, int noy) {
    for(int y = 0; y < height / 2; ++y) for(int x = 0; x < width / 2; ++x) for(int e = 0; e < stride; ++e){
      int oldx = 2*x + ox;
      int oldy = 2*y + oy;
      data(x + nox, y + noy, e) = F::doit(data(oldx, oldy, e), data(oldx + 1, oldy, e),
                                          data(oldx, oldy + 1, e), data(oldx + 1, oldy + 1, e));
    }
  }

  // create a new texture memory
  // save the original texture and all the mipmap levels on its right
  void memory_update(); 

  void add_lookup(const ShVariable &tc, const ShVariable &result) const; 
  
  void rect_lookup(ShVariable &result, ShVariable &tcvar) const;
  void lookup(ShVariable &result, ShVariable &tcvar) const;

  ShVariable texVar();

private:
  ShTextureNodePtr m_other;  
  ShTextureNodePtr m_node; 
  int m_width; 
};

}

#endif
