// WARNING - DO NOT EDIT THIS FILE:
// This file was automatically generated from scripts/AttribImpl.hpp.py.
// If you wish to change it, edit that file instead.
//
// ---
//
// Sh: A GPU metaprogramming language.
//
// Copyright 2003-2006 Serious Hack Inc.
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
// MA  02110-1301, USA
//////////////////////////////////////////////////////////////////////////////

#ifndef SH_ATTRIBIMPL_HPP
#define SH_ATTRIBIMPL_HPP

#include "Attrib.hpp"
#include "Context.hpp"
#include "Statement.hpp"
#include "Debug.hpp"

namespace SH {

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>::Attrib()
  : Generic<N, T>(new VariableNode(Binding, N, StorageTypeInfo<T>::value_type, Semantic))
{
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>::Attrib(const Generic<N, T2>& other)
  : Generic<N, T>(new VariableNode(Binding, N, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>::Attrib(const Attrib<N, Binding, T, Semantic, Swizzled>& other)
  : Generic<N, T>(new VariableNode(Binding, N, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>::Attrib(const Attrib<N, Binding, T2, Semantic, Swizzled>& other)
  : Generic<N, T>(new VariableNode(Binding, N, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>::Attrib(const VariableNodePtr& node,
  const Swizzle& swizzle, bool neg)
  : Generic<N, T>(node, swizzle, neg)
{
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>::Attrib(const host_type data[N])
  : Generic<N, T>(new VariableNode(Binding, N, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    for (int i = 0; i < N; i++) setValue(i, data[i]);
  } else {
    (*this) = Attrib<N, SH_CONST, T, Semantic>(data);
  }
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>::~Attrib()
{
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator=(const Generic<N, T2>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator=(const Attrib<N, Binding, T, Semantic, Swizzled>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator=(const Attrib<N, Binding, T2, Semantic, Swizzled>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator=(const Program& prg)
{
  ParentType::operator=(prg);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator++()
{
  ParentType::operator++();
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator--()
{
  ParentType::operator--();
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator+=(const Generic<N, T2>& right)
{
  ParentType::operator+=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator-=(const Generic<N, T2>& right)
{
  ParentType::operator-=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator*=(const Generic<N, T2>& right)
{
  ParentType::operator*=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator/=(const Generic<N, T2>& right)
{
  ParentType::operator/=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator%=(const Generic<N, T2>& right)
{
  ParentType::operator%=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator+=(host_type right)
{
  ParentType::operator+=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator-=(host_type right)
{
  ParentType::operator-=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator*=(host_type right)
{
  ParentType::operator*=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator/=(host_type right)
{
  ParentType::operator/=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator%=(host_type right)
{
  ParentType::operator%=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator+=(const Generic<1, T2>& right)
{
  ParentType::operator+=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator-=(const Generic<1, T2>& right)
{
  ParentType::operator-=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator*=(const Generic<1, T2>& right)
{
  ParentType::operator*=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator/=(const Generic<1, T2>& right)
{
  ParentType::operator/=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<N, Binding, T, Semantic, Swizzled>&
Attrib<N, Binding, T, Semantic, Swizzled>::operator%=(const Generic<1, T2>& right)
{
  ParentType::operator%=(right);
  return *this;
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, true>
Attrib<N, Binding, T, Semantic, Swizzled>::operator()(int s0) const
{
  return Attrib<1, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(N, s0), this->m_neg);
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, true>
Attrib<N, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1) const
{
  return Attrib<2, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(N, s0, s1), this->m_neg);
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, true>
Attrib<N, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1, int s2) const
{
  return Attrib<3, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(N, s0, s1, s2), this->m_neg);
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, true>
Attrib<N, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1, int s2, int s3) const
{
  return Attrib<4, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(N, s0, s1, s2, s3), this->m_neg);
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<int N2>
Attrib<N2, Binding, T, Semantic, true>
Attrib<N, Binding, T, Semantic, Swizzled>::swiz(int indices[]) const
{
  return Attrib<N2, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(N, N2, indices), this->m_neg);
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, true>
Attrib<N, Binding, T, Semantic, Swizzled>::operator[](int s0) const
{
  return Attrib<1, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(N, s0), this->m_neg);
}

template<int N, BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>
Attrib<N, Binding, T, Semantic, Swizzled>::operator-() const
{
  return Attrib<N, Binding, T, Semantic, Swizzled>(this->m_node, this->m_swizzle, !this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>::Attrib()
  : Generic<1, T>(new VariableNode(Binding, 1, StorageTypeInfo<T>::value_type, Semantic))
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<1, Binding, T, Semantic, Swizzled>::Attrib(const Generic<1, T2>& other)
  : Generic<1, T>(new VariableNode(Binding, 1, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>::Attrib(const Attrib<1, Binding, T, Semantic, Swizzled>& other)
  : Generic<1, T>(new VariableNode(Binding, 1, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<1, Binding, T, Semantic, Swizzled>::Attrib(const Attrib<1, Binding, T2, Semantic, Swizzled>& other)
  : Generic<1, T>(new VariableNode(Binding, 1, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>::Attrib(const VariableNodePtr& node,
  const Swizzle& swizzle, bool neg)
  : Generic<1, T>(node, swizzle, neg)
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>::Attrib(const host_type data[1])
  : Generic<1, T>(new VariableNode(Binding, 1, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    for (int i = 0; i < 1; i++) setValue(i, data[i]);
  } else {
    (*this) = Attrib<1, SH_CONST, T, Semantic>(data);
  }
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>::Attrib(const host_type s0)
  : Generic<1, T>(new VariableNode(Binding, 1, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    setValue(0, s0);
  } else {
    (*this) = Attrib<1, SH_CONST, T, Semantic>(s0);
  }
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>::~Attrib()
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator=(const Generic<1, T2>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator=(const Attrib<1, Binding, T, Semantic, Swizzled>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator=(const Attrib<1, Binding, T2, Semantic, Swizzled>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator=(host_type other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator=(const Program& prg)
{
  ParentType::operator=(prg);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator++()
{
  ParentType::operator++();
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator--()
{
  ParentType::operator--();
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator+=(const Generic<1, T2>& right)
{
  ParentType::operator+=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator-=(const Generic<1, T2>& right)
{
  ParentType::operator-=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator*=(const Generic<1, T2>& right)
{
  ParentType::operator*=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator/=(const Generic<1, T2>& right)
{
  ParentType::operator/=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator%=(const Generic<1, T2>& right)
{
  ParentType::operator%=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator+=(host_type right)
{
  ParentType::operator+=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator-=(host_type right)
{
  ParentType::operator-=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator*=(host_type right)
{
  ParentType::operator*=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator/=(host_type right)
{
  ParentType::operator/=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>&
Attrib<1, Binding, T, Semantic, Swizzled>::operator%=(host_type right)
{
  ParentType::operator%=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, true>
Attrib<1, Binding, T, Semantic, Swizzled>::operator()(int s0) const
{
  return Attrib<1, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(1, s0), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, true>
Attrib<1, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1) const
{
  return Attrib<2, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(1, s0, s1), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, true>
Attrib<1, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1, int s2) const
{
  return Attrib<3, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(1, s0, s1, s2), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, true>
Attrib<1, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1, int s2, int s3) const
{
  return Attrib<4, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(1, s0, s1, s2, s3), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<int N2>
Attrib<N2, Binding, T, Semantic, true>
Attrib<1, Binding, T, Semantic, Swizzled>::swiz(int indices[]) const
{
  return Attrib<N2, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(1, N2, indices), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, true>
Attrib<1, Binding, T, Semantic, Swizzled>::operator[](int s0) const
{
  return Attrib<1, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(1, s0), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>
Attrib<1, Binding, T, Semantic, Swizzled>::operator-() const
{
  return Attrib<1, Binding, T, Semantic, Swizzled>(this->m_node, this->m_swizzle, !this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>::Attrib()
  : Generic<2, T>(new VariableNode(Binding, 2, StorageTypeInfo<T>::value_type, Semantic))
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>::Attrib(const Generic<2, T2>& other)
  : Generic<2, T>(new VariableNode(Binding, 2, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>::Attrib(const Attrib<2, Binding, T, Semantic, Swizzled>& other)
  : Generic<2, T>(new VariableNode(Binding, 2, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>::Attrib(const Attrib<2, Binding, T2, Semantic, Swizzled>& other)
  : Generic<2, T>(new VariableNode(Binding, 2, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>::Attrib(const VariableNodePtr& node,
  const Swizzle& swizzle, bool neg)
  : Generic<2, T>(node, swizzle, neg)
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>::Attrib(const host_type data[2])
  : Generic<2, T>(new VariableNode(Binding, 2, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    for (int i = 0; i < 2; i++) setValue(i, data[i]);
  } else {
    (*this) = Attrib<2, SH_CONST, T, Semantic>(data);
  }
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>::Attrib(const host_type s0, const host_type s1)
  : Generic<2, T>(new VariableNode(Binding, 2, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    host_type data[2] = {s0, s1};
    setValues(data);
  } else {
    (*this) = Attrib<2, SH_CONST, T, Semantic>(s0, s1);
  }
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2, typename T3>
Attrib<2, Binding, T, Semantic, Swizzled>::Attrib(const Generic<1, T2>& s0, const Generic<1, T3>& s1)
  : Generic<2, T>(new VariableNode(Binding, 2, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    DEBUG_ASSERT(s0.hasValues());
    DEBUG_ASSERT(s1.hasValues());
    host_type data[2] = {s0.getValue(0), s1.getValue(0)};
    setValues(data);
  } else {
    (*this)[0] = s0;
    (*this)[1] = s1;
  }
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>::~Attrib()
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator=(const Generic<2, T2>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator=(const Attrib<2, Binding, T, Semantic, Swizzled>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator=(const Attrib<2, Binding, T2, Semantic, Swizzled>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator=(const Program& prg)
{
  ParentType::operator=(prg);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator++()
{
  ParentType::operator++();
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator--()
{
  ParentType::operator--();
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator+=(const Generic<2, T2>& right)
{
  ParentType::operator+=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator-=(const Generic<2, T2>& right)
{
  ParentType::operator-=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator*=(const Generic<2, T2>& right)
{
  ParentType::operator*=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator/=(const Generic<2, T2>& right)
{
  ParentType::operator/=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator%=(const Generic<2, T2>& right)
{
  ParentType::operator%=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator+=(host_type right)
{
  ParentType::operator+=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator-=(host_type right)
{
  ParentType::operator-=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator*=(host_type right)
{
  ParentType::operator*=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator/=(host_type right)
{
  ParentType::operator/=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator%=(host_type right)
{
  ParentType::operator%=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator+=(const Generic<1, T2>& right)
{
  ParentType::operator+=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator-=(const Generic<1, T2>& right)
{
  ParentType::operator-=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator*=(const Generic<1, T2>& right)
{
  ParentType::operator*=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator/=(const Generic<1, T2>& right)
{
  ParentType::operator/=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<2, Binding, T, Semantic, Swizzled>&
Attrib<2, Binding, T, Semantic, Swizzled>::operator%=(const Generic<1, T2>& right)
{
  ParentType::operator%=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, true>
Attrib<2, Binding, T, Semantic, Swizzled>::operator()(int s0) const
{
  return Attrib<1, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(2, s0), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, true>
Attrib<2, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1) const
{
  return Attrib<2, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(2, s0, s1), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, true>
Attrib<2, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1, int s2) const
{
  return Attrib<3, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(2, s0, s1, s2), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, true>
Attrib<2, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1, int s2, int s3) const
{
  return Attrib<4, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(2, s0, s1, s2, s3), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<int N2>
Attrib<N2, Binding, T, Semantic, true>
Attrib<2, Binding, T, Semantic, Swizzled>::swiz(int indices[]) const
{
  return Attrib<N2, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(2, N2, indices), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, true>
Attrib<2, Binding, T, Semantic, Swizzled>::operator[](int s0) const
{
  return Attrib<1, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(2, s0), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>
Attrib<2, Binding, T, Semantic, Swizzled>::operator-() const
{
  return Attrib<2, Binding, T, Semantic, Swizzled>(this->m_node, this->m_swizzle, !this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>::Attrib()
  : Generic<3, T>(new VariableNode(Binding, 3, StorageTypeInfo<T>::value_type, Semantic))
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>::Attrib(const Generic<3, T2>& other)
  : Generic<3, T>(new VariableNode(Binding, 3, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>::Attrib(const Attrib<3, Binding, T, Semantic, Swizzled>& other)
  : Generic<3, T>(new VariableNode(Binding, 3, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>::Attrib(const Attrib<3, Binding, T2, Semantic, Swizzled>& other)
  : Generic<3, T>(new VariableNode(Binding, 3, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>::Attrib(const VariableNodePtr& node,
  const Swizzle& swizzle, bool neg)
  : Generic<3, T>(node, swizzle, neg)
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>::Attrib(const host_type data[3])
  : Generic<3, T>(new VariableNode(Binding, 3, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    for (int i = 0; i < 3; i++) setValue(i, data[i]);
  } else {
    (*this) = Attrib<3, SH_CONST, T, Semantic>(data);
  }
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>::Attrib(const host_type s0, const host_type s1, const host_type s2)
  : Generic<3, T>(new VariableNode(Binding, 3, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    host_type data[3] = {s0, s1, s2};
    setValues(data);
  } else {
    (*this) = Attrib<3, SH_CONST, T, Semantic>(s0, s1, s2);
  }
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2, typename T3, typename T4>
Attrib<3, Binding, T, Semantic, Swizzled>::Attrib(const Generic<1, T2>& s0, const Generic<1, T3>& s1, const Generic<1, T4>& s2)
  : Generic<3, T>(new VariableNode(Binding, 3, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    DEBUG_ASSERT(s0.hasValues());
    DEBUG_ASSERT(s1.hasValues());
    DEBUG_ASSERT(s2.hasValues());
    host_type data[3] = {s0.getValue(0), s1.getValue(0), s2.getValue(0)};
    setValues(data);
  } else {
    (*this)[0] = s0;
    (*this)[1] = s1;
    (*this)[2] = s2;
  }
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>::~Attrib()
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator=(const Generic<3, T2>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator=(const Attrib<3, Binding, T, Semantic, Swizzled>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator=(const Attrib<3, Binding, T2, Semantic, Swizzled>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator=(const Program& prg)
{
  ParentType::operator=(prg);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator++()
{
  ParentType::operator++();
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator--()
{
  ParentType::operator--();
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator+=(const Generic<3, T2>& right)
{
  ParentType::operator+=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator-=(const Generic<3, T2>& right)
{
  ParentType::operator-=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator*=(const Generic<3, T2>& right)
{
  ParentType::operator*=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator/=(const Generic<3, T2>& right)
{
  ParentType::operator/=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator%=(const Generic<3, T2>& right)
{
  ParentType::operator%=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator+=(host_type right)
{
  ParentType::operator+=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator-=(host_type right)
{
  ParentType::operator-=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator*=(host_type right)
{
  ParentType::operator*=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator/=(host_type right)
{
  ParentType::operator/=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator%=(host_type right)
{
  ParentType::operator%=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator+=(const Generic<1, T2>& right)
{
  ParentType::operator+=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator-=(const Generic<1, T2>& right)
{
  ParentType::operator-=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator*=(const Generic<1, T2>& right)
{
  ParentType::operator*=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator/=(const Generic<1, T2>& right)
{
  ParentType::operator/=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<3, Binding, T, Semantic, Swizzled>&
Attrib<3, Binding, T, Semantic, Swizzled>::operator%=(const Generic<1, T2>& right)
{
  ParentType::operator%=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, true>
Attrib<3, Binding, T, Semantic, Swizzled>::operator()(int s0) const
{
  return Attrib<1, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(3, s0), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, true>
Attrib<3, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1) const
{
  return Attrib<2, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(3, s0, s1), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, true>
Attrib<3, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1, int s2) const
{
  return Attrib<3, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(3, s0, s1, s2), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, true>
Attrib<3, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1, int s2, int s3) const
{
  return Attrib<4, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(3, s0, s1, s2, s3), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<int N2>
Attrib<N2, Binding, T, Semantic, true>
Attrib<3, Binding, T, Semantic, Swizzled>::swiz(int indices[]) const
{
  return Attrib<N2, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(3, N2, indices), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, true>
Attrib<3, Binding, T, Semantic, Swizzled>::operator[](int s0) const
{
  return Attrib<1, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(3, s0), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>
Attrib<3, Binding, T, Semantic, Swizzled>::operator-() const
{
  return Attrib<3, Binding, T, Semantic, Swizzled>(this->m_node, this->m_swizzle, !this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>::Attrib()
  : Generic<4, T>(new VariableNode(Binding, 4, StorageTypeInfo<T>::value_type, Semantic))
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>::Attrib(const Generic<4, T2>& other)
  : Generic<4, T>(new VariableNode(Binding, 4, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>::Attrib(const Attrib<4, Binding, T, Semantic, Swizzled>& other)
  : Generic<4, T>(new VariableNode(Binding, 4, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>::Attrib(const Attrib<4, Binding, T2, Semantic, Swizzled>& other)
  : Generic<4, T>(new VariableNode(Binding, 4, StorageTypeInfo<T>::value_type, Semantic))
{
  shASN(*this, other);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>::Attrib(const VariableNodePtr& node,
  const Swizzle& swizzle, bool neg)
  : Generic<4, T>(node, swizzle, neg)
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>::Attrib(const host_type data[4])
  : Generic<4, T>(new VariableNode(Binding, 4, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    for (int i = 0; i < 4; i++) setValue(i, data[i]);
  } else {
    (*this) = Attrib<4, SH_CONST, T, Semantic>(data);
  }
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>::Attrib(const host_type s0, const host_type s1, const host_type s2, const host_type s3)
  : Generic<4, T>(new VariableNode(Binding, 4, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    host_type data[4] = {s0, s1, s2, s3};
    setValues(data);
  } else {
    (*this) = Attrib<4, SH_CONST, T, Semantic>(s0, s1, s2, s3);
  }
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2, typename T3, typename T4, typename T5>
Attrib<4, Binding, T, Semantic, Swizzled>::Attrib(const Generic<1, T2>& s0, const Generic<1, T3>& s1, const Generic<1, T4>& s2, const Generic<1, T5>& s3)
  : Generic<4, T>(new VariableNode(Binding, 4, StorageTypeInfo<T>::value_type, Semantic))
{
  if (Binding == SH_CONST) {
    DEBUG_ASSERT(s0.hasValues());
    DEBUG_ASSERT(s1.hasValues());
    DEBUG_ASSERT(s2.hasValues());
    DEBUG_ASSERT(s3.hasValues());
    host_type data[4] = {s0.getValue(0), s1.getValue(0), s2.getValue(0), s3.getValue(0)};
    setValues(data);
  } else {
    (*this)[0] = s0;
    (*this)[1] = s1;
    (*this)[2] = s2;
    (*this)[3] = s3;
  }
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>::~Attrib()
{
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator=(const Generic<4, T2>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator=(const Attrib<4, Binding, T, Semantic, Swizzled>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator=(const Attrib<4, Binding, T2, Semantic, Swizzled>& other)
{
  ParentType::operator=(other);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator=(const Program& prg)
{
  ParentType::operator=(prg);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator++()
{
  ParentType::operator++();
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator--()
{
  ParentType::operator--();
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator+=(const Generic<4, T2>& right)
{
  ParentType::operator+=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator-=(const Generic<4, T2>& right)
{
  ParentType::operator-=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator*=(const Generic<4, T2>& right)
{
  ParentType::operator*=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator/=(const Generic<4, T2>& right)
{
  ParentType::operator/=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator%=(const Generic<4, T2>& right)
{
  ParentType::operator%=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator+=(host_type right)
{
  ParentType::operator+=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator-=(host_type right)
{
  ParentType::operator-=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator*=(host_type right)
{
  ParentType::operator*=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator/=(host_type right)
{
  ParentType::operator/=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator%=(host_type right)
{
  ParentType::operator%=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator+=(const Generic<1, T2>& right)
{
  ParentType::operator+=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator-=(const Generic<1, T2>& right)
{
  ParentType::operator-=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator*=(const Generic<1, T2>& right)
{
  ParentType::operator*=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator/=(const Generic<1, T2>& right)
{
  ParentType::operator/=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<typename T2>
Attrib<4, Binding, T, Semantic, Swizzled>&
Attrib<4, Binding, T, Semantic, Swizzled>::operator%=(const Generic<1, T2>& right)
{
  ParentType::operator%=(right);
  return *this;
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, true>
Attrib<4, Binding, T, Semantic, Swizzled>::operator()(int s0) const
{
  return Attrib<1, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(4, s0), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<2, Binding, T, Semantic, true>
Attrib<4, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1) const
{
  return Attrib<2, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(4, s0, s1), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<3, Binding, T, Semantic, true>
Attrib<4, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1, int s2) const
{
  return Attrib<3, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(4, s0, s1, s2), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, true>
Attrib<4, Binding, T, Semantic, Swizzled>::operator()(int s0, int s1, int s2, int s3) const
{
  return Attrib<4, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(4, s0, s1, s2, s3), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
template<int N2>
Attrib<N2, Binding, T, Semantic, true>
Attrib<4, Binding, T, Semantic, Swizzled>::swiz(int indices[]) const
{
  return Attrib<N2, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(4, N2, indices), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<1, Binding, T, Semantic, true>
Attrib<4, Binding, T, Semantic, Swizzled>::operator[](int s0) const
{
  return Attrib<1, Binding, T, Semantic, true>(this->m_node, this->m_swizzle * Swizzle(4, s0), this->m_neg);
}

template<BindingType Binding, typename T, SemanticType Semantic, bool Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>
Attrib<4, Binding, T, Semantic, Swizzled>::operator-() const
{
  return Attrib<4, Binding, T, Semantic, Swizzled>(this->m_node, this->m_swizzle, !this->m_neg);
}


} // namespace SH

#endif // SH_ATTRIBIMPL_HPP
