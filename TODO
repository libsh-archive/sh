TODO file for libsh

GENERIC SMALL TASKS:
 - add ShFooCPtr typedefs everywhere (for RefCountable types)
 - rename ShRefCount to ShPointer or something else more useful
 - everywhere where we pass a ShFooPtr into a function, replace it with
   const ShFooPtr&
 - use ShFooCPtrs where appropriate
 X have updating semantics for uniforms
 X need a map of shader kind -> currently bound shader
 X hack constant loading for now by recompiling shader everytime it is bound
 X hack constant loading for now by recompiling shader everytime a uniform is changed.
 - have a setValues() call in ShVariableNode taking an array of indices and an array of values.
 X check into CVS
 - improve error handling in ShParser.cpp
 - add line numbers/filenames to tokens, use this in error handling
 X add additional layer for eror handling: don't throw exceptions by
   default, instead just output to stderr or so.
 - break and continue (requires some extra information in the parser)
 X gather variables in ShShader
 X simple SM register allocation
 X add negation to variables
 X compute uniform constant operations in the host
 X send uniform values to SM in the SM backend
 X add Swizzling operators to ShVariable
 - make ShVariable operators return ShVariableN
 X add Swizzling operators to ShVariableN
 X negation in SM backend code upload
 X store ShBackendCode objects in ShShader
 - replace assert() with exceptions/error function
 - add operator*(T) and similar for division to Sh{Lib*,Matrix}.hpp
 X add operator[] to ShAttrib also to do one-element swizzle.
 - use a ShVariableKind instead of an int template parameter in ShAttrib and ShMatrix
 X rename "shader kind" to "shader target" throughout the code.
 X replace integers for shader targets with strings
 - add a switchBackend() function that clears boundShaders(), etc.
 - add ShIOVariable types as a single variable used for both Input and Output
 - add more tests to test/constant.sht

GENERIC MEDIUM TASKS:
 X port more of the ShLib calls to the new model.
 X code generator
 - add smarter configuration mechanism
 - add "context" concept, or campaigns
 X vectors, points, colours, positions, texcoords
 - rethink some of the binding mechanism

OVERALL LARGE TASKS:
 X linear register allocator
 X finish the parser
 X begin the optimizer
 / matrices
 / textures
 - directx backend
 - Cg backend
 - integrate Kevin's shgl stuff
 - SSE backend
 - python interface

OPTIMIZER:
 X control flow graph optimizations
 X Run the optimizations more than once as necessary.
 X Don't run the optimizer twice in connect(), once the previous item is done.
 - Do dead code on inputs/outputs/inouts (currently only does temps)
 - constant folding
 - algebraic simplification
 - refactor some of the optimizer code, in particular uddu chains
 - improve uddu chain algorithm by using bitsets to keep track of tuple element writes

TRANSFORMER:
 X Replace inputs/outputs in computation & inouts when not supported by target
 / Split long tuples
   X temps, constants (and uniforms), inputs/outputs/inouts 
   - textures, streams

SHADER ALGEBRA:
 X fix combine() to operate correctly on empty graphs.
 X fix combine() to operate correctly on null programs
 X operator&() for combine()
 X replaceUniform()
 X add operator>> for uniform extraction
 X shPermute()
 X shExtract()
 X shDrop()
 X shKeep(), shLose(), shDup()
 X make connect work with inputs != outputs 
 X add operator<< for uniforms
 - add constant() for uniforms with operator<<
 - implement named temporary extraction (maybe)

STREAMS:
 X implement execute() for Arb
 - implement execute() for Sm
 X add ShChannelNode
 X add ShChannel
 X add ShStream
 X implement combine/connect operations
 - implement stream _extraction_ operation
    (replace stream usages with an input variable)
 - allow using a stream as both input and output with multiple output streams
    (cache output first, then copy at the very end)

MATRICES:
 X operator()() extracts submatrix
 X operator[] extracts single row
 X operator{+,-,*,/}=
 X add matrix mults
 X adjunct
 X determinant
 X inverse
 - name()
 - add some matrix expand() call to expand to an ident matrix with top-left submatrix replaced with M

TEXTURES:
 X bind texture units in shader
 X scale lookups in SM backend
 X load data into textures
 - turn 3-textures into 4-textures automatically... in sm backend!
 X update notification
 - mip mapping
 - other lookup mechanisms (bilinear etc.)
 - generic traits mechanism
 X 1D
 - 3D
 / cube maps
    X high-level
    X ARB
    - SM
 - in ARB backend, share textures between multiple shaders
    - maybe a generic bookkeeping mechanism for this

ARB BACKEND:
 X split into multiple files
 / add extension querying/plugin mechanism for ATI extensions etc.
 / long tuples
   X updateUniform
   - textures
   - streams
   - proper input/output handling

SM BACKEND:
 / long tuples 
   - updateUniform
   - textures
   - streams
   - proper input/output handling

=== OPERATIONS ===

+-----+-+
|L S S|A|
|i t M|R|
|b m  |B|
|  t  | |
|-+-+-+-+
|X|X|X|X| mul
|X|X|X|X| div
|X|X|X|X| add
|X|X|X|X| sub
|X|X|X|X| sqrt
|X|X|X|X| dot
|X|X|X|X| pow   TODO: vector x scalar
|X|X|X|X| frac
|X|X|X|X| sin
|X|X|X|X| cos
| | | | | tan
|X|X|X|/| <, <=, >, >=, ==, != TODO: These are, um, declared as N x 1. They should either be 1 x 1 or N x N.
|X|X|X|X| floor 
|X|X|X|X| ceil
|X|X| | | acos
|X|X| | | asin
| | | | | atan
|X|X|X|X| cross
|X|X|X|X| min
|X|X|X|X| max
| | | | | exp
| | | | | log
|X|X|X|X| fmod
|X|X|X|X| lerp
|X|X|X|X| mad
| | | | | rcp 
| | | | | rsqrt
|X|X|X|X| norm
|X|X|X|X| cond
|X|X| |X| kil
+-+-+-+-+

=== OLD RELEASES ===

RELEASE (SUMMER 2004):
 X rename ShShader to ShProgram
 X add SH_BEGIN_{VERTEX, FRAGMENT}_SHADER macros
 X add licensing blurbs
 X check for libpng in configure
 X check for SM/GL for the backends in configure
 X make sure "make install" works
 X dynamic backend loading
 X port to windows
 X swap around order for cubemaps
 X get an environment map
 X clean up demos
 X upload/bind split in Arb backend 
 X scalar constant operators
