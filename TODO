RELEASE:
 X rename ShShader to ShProgram
 X add SH_BEGIN_{VERTEX, FRAGMENT}_SHADER macros
 X add licensing blurbs
 X check for libpng in configure
 X check for SM/GL for the backends in configure
 X make sure "make install" works
 - have functions to switch the current backend, clearing bound shaders etc. appropriately.

MATRICES:
 X operator()() extracts submatrix
 X operator[] extracts single row
 X operator{+,-,*,/}=
 X add matrix mults
 - adjunct
 - determinant
 - inverse
 - name()
 - add some matrix expand() call to expand to an ident matrix with top-left submatrix replaced with M
 - identity fetcher

TEXTURES:
 X bind texture units in shader
 X scale lookups in SM backend
 X load data into textures
 - turn 3-textures into 4-textures automatically... in sm backend!
 - update notification
 - mip mapping
 - other lookup mechanisms (bilinear etc.)
 - generic traits mechanism
 X 1D
 - 3D
 / cube maps
    X high-level
    X ARB
    - SM

SMALL TASKS:
 X have updating semantics for uniforms
 X need a map of shader kind -> currently bound shader
 X hack constant loading for now by recompiling shader everytime it is bound
 X hack constant loading for now by recompiling shader everytime a uniform is changed.
 - have a setValues() call in ShVariableNode taking an array of indices and an array of values.
 X check into CVS
 - improve error handling in ShParser.cpp
 - add line numbers/filenames to tokens, use this in error handling
 - add additional layer for eror handling: don't throw exceptions by
   default, instead just output to stderr or so.
 - break and continue (requires some extra information)
 X gather variables in ShShader
 X simple SM register allocation
 X add negation to variables
 X compute uniform constant operations in the host
 X send uniform values to SM in the SM backend
 X add Swizzling operators to ShVariable
 - make ShVariable operators return ShVariableN
 X add Swizzling operators to ShVariableN
 X negation in SM backend code upload
 X store ShBackendCode objects in ShShader
 - replace assert() with exceptions/error function
 - add operator*(T) and similar for division to Sh{Lib*,Matrix}.hpp
 X add operator[] to ShAttrib also to do one-element swizzle.
 - use a ShVariableKind instead of an int template parameter in ShAttrib and ShMatrix

MEDIUM TASKS:
 X port more of the ShLib calls to the new model.
 X code generator
 - add smarter configuration mechanism
 - add "context" concept
 X vectors, points, colours, positions, texcoords

LARGE TASKS:
 X linear register allocator
 X finish the parser
 / begin the optimizer
 / matrices
 / textures
 X more backends

OPERATIONS:

+-----+-+
|L S S|A|
|i t M|R|
|b m  |B|
|  t  | |
|-+-+-+-+
|X|X|X|X| mul
|X|X|X|X| div
|X|X|X|X| add
|X|X|X|X| sub
|X|X|X| | sqrt
|X|X|X|X| dot
|X|X|X|X| pow   TODO: vector x scalar
|X|X|X| | frac
|X|X|X| | sin
|X|X|X| | cos
| | | | | tan
|X|X|X|/| <, <=, >, >=, ==, != TODO: These are, um, declared as N x 1. They should either be 1 x 1 or N x N.
| |X| | | ceil
|X|X| | | acos
|X|X| | | asin
| | | | | atan
| | | | | cross
|X|X|X|X| min
|X|X|X|X| max
| | | | | exp
| | | | | log
| | | | | fmod
| | | | | lerp
| | | | | rcp (?)
| | | | | rsqrt
|X|X|X|X| norm
|X|X|X|X| cond
|X|X| |X| kil
+-+-+-+-+
